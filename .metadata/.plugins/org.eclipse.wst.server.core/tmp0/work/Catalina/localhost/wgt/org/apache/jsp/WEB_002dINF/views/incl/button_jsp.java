/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-08-29 02:34:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.incl;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.net.URLEncoder;
import java.net.URLDecoder;

public final class button_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1656316243398L));
    _jspx_dependants.put("jar:file:/C:/wgt/Where-are-you-going-today/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/wgt/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.net.URLDecoder");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\"\r\n");
      out.write("	href=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\" />\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<a class=\"userInformation\"> <span></span></a>\r\n");
      out.write("		<nav id=gnb>\r\n");
      out.write("		<ul>\r\n");
      out.write("			<!-- userId를 세션으로 받아서 사용하세요  -->\r\n");
      out.write("			<li class=\"sub1\"><span>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("님<br> 반가워요 !</span></li>\r\n");
      out.write("			<hr style=\"border: none; background-color: #DA0037; margin-bottom: 20px; height: 2px; width: 200px;\">\r\n");
      out.write("			<li class=\"sub2\">\r\n");
      out.write("				<form id=\"submitID\" action=\"go_get_waiting\" method=\"post\">\r\n");
      out.write("					<a onclick=\"location.href='/wgt/controller/get_waiting'\">나의 웨이팅</a>\r\n");
      out.write("				</form>\r\n");
      out.write("			</li>\r\n");
      out.write("			<li class=\"sub3\"><a onclick=\"location.href='/wgt/userInfo';\">회원정보\r\n");
      out.write("					보기</a></li>\r\n");
      out.write("			<hr style=\"border: none; width: 200px;\">\r\n");
      out.write("			<li class=\"sub4\"><a onclick=\"location.href='/wgt/logOut';\">로그아웃</a>\r\n");
      out.write("			</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("	</nav>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("/*\r\n");
      out.write(" 0.\r\n");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("를 사용 할 수 있게 세션 먼저 받아주세요\r\n");
      out.write("\r\n");
      out.write(" 1.\r\n");
      out.write("이걸로 감싸면 뒤에 화면 opacity가 15%로 변합니다\r\n");
      out.write("<div class=\"header_form\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" 2.\r\n");
      out.write("여기를 클릭하면 상세보기 삭제 (감싸서 쓰세요) 만들어도 되고\r\n");
      out.write("<div class=\"click\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" 3.\r\n");
      out.write("아이디값에 해당하는 부분을 클릭하면 상세보기 삭제(스크립트) 아이디 적어서 쓰시면 됩니다. \r\n");
      out.write("변수 이름 바꿔서 사용\r\n");
      out.write("\r\n");
      out.write("예시 const [원하는 변수명]click = document.getElementById('[아이디값]')\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" 4. 실제 사용코드 \r\n");
      out.write(" 위에 1번을 사용했으면 사용해야 하는 코드\r\n");
      out.write("const bodytoggle = document.querySelector(\".header_form\")\r\n");
      out.write("\r\n");
      out.write("위에 2번을 사용했으면 사용해야 하는 코드\r\n");
      out.write("const bodyClick = document.querySelector(\".click\")\r\n");
      out.write("\r\n");
      out.write("햄버거 버튼 클릭 이벤트 실행에 필요한 필수 코드\r\n");
      out.write("const toggleBtn = document.querySelector(\".userInformation\")\r\n");
      out.write("const gnbBtn = document.querySelector(\"#gnb\")\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("5. 동작 함수 선언\r\n");
      out.write("\r\n");
      out.write("		토글을 사용하여 오른쪽에서 화면 출현\r\n");
      out.write("		\r\n");
      out.write("		function toggleHandler() {\r\n");
      out.write("			toggleBtn.classList.toggle(\"open\")\r\n");
      out.write("			gnbBtn.classList.toggle(\"on\")\r\n");
      out.write("			bodytoggle.classList.toggle(\"on\")\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		토글이 아닌 사용자가 지정한 곳을 클릭했을때 토글들의 클래스를 삭제하는 함수\r\n");
      out.write("		 function removeOn() {\r\n");
      out.write("			bodytoggle.classList.remove(\"on\")\r\n");
      out.write("			toggleBtn.classList.remove(\"open\")\r\n");
      out.write("			gnbBtn.classList.remove(\"on\")\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		위에 3번에 예시를 사용했다면\r\n");
      out.write("예시 const [원하는 변수명] = document.getElementById('[아이디값]')\r\n");
      out.write("		      ↓\r\n");
      out.write("		  [위에 선언한 변수].addEventListener(\"click\", [function 이름 사용 (아마 removeOn ?)])\r\n");
      out.write("		(ex)toggleBtn.addEventListener(\"click\", removeOn);\r\n");
      out.write("		이렇게 사용하시면 됩니다.\r\n");
      out.write("		\r\n");
      out.write("		토글 이벤트를 위한 addEventListener\r\n");
      out.write("		toggleBtn.addEventListener(\"click\", toggleHandler);\r\n");
      out.write("		\r\n");
      out.write("		위에 2번에 해당하는 부분을 클릭했을때 원래 화면으로 돌아오는 addEventListener\r\n");
      out.write("		bodyClick.addEventListener(\"click\", removeOn);\r\n");
      out.write("		*/\r\n");
      out.write("		\r\n");
      out.write("		const bodytoggle = document.querySelector(\".header_form\")\r\n");
      out.write("		const gnbBtn = document.querySelector(\"#gnb\")\r\n");
      out.write("		const toggleBtn = document.querySelector(\".userInformation\")\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		function onClicksubMit() {\r\n");
      out.write("			bodytoggle.submit(event.target.value);\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function toggleHandler() {\r\n");
      out.write("			toggleBtn.classList.toggle(\"open\")\r\n");
      out.write("			gnbBtn.classList.toggle(\"on\")\r\n");
      out.write("			bodytoggle.classList.toggle(\"on\")\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		function removeOn() {\r\n");
      out.write("			bodytoggle.classList.remove(\"on\")\r\n");
      out.write("			toggleBtn.classList.remove(\"open\")\r\n");
      out.write("			gnbBtn.classList.remove(\"on\")\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		function submit_form() {\r\n");
      out.write("			document.getElementById('submitID').submit();\r\n");
      out.write("\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		toggleBtn.addEventListener(\"click\", toggleHandler);\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /WEB-INF/views/incl/button.jsp(12,7) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/resources/incl/button.css");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }
}
